apply plugin: 'com.android.library'

android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    sourceSets {
        main.assets.srcDirs += ['src/main/assets', 'src/main/effects/bundle', 'src/main/makeup/bundle']
        main.res.srcDirs += ['src/main/res', 'src/main/effects/res', 'src/main/filters/res', 'src/main/makeup/res']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(path: ':faceunity')

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def syncFaceunityEffectAsset(urlFilePath, dest_file, url_param) {
    def local_fu_zip_path = "$project.projectDir/build/$dest_file"

    def local_build_dir = new File("$project.projectDir/build/")
    if (!local_build_dir.exists()) {
        local_build_dir.mkdir()
    }

    def local_res_zip = new File("$local_fu_zip_path")
    if (!local_res_zip.exists() || local_res_zip.size() < 82231621) {
        def dest_url = "$urlFilePath/$dest_file"
        println("=== download faceunity effects === " + dest_url)
        new URL("$dest_url").openConnection().with { conn ->
            url_param.each{key,value ->
                conn.setRequestProperty(key, value)
            }
            local_res_zip.withOutputStream { conn.inputStream.with { i -> it << i } }
        }
        println("=== Extract faceunity effects ===")
        copy {
            from zipTree("$local_fu_zip_path")
            into "$project.projectDir/src/main"
        }
    }
}


task syncFaceunityAssets() {

    // FOR github
    def fu_sync_dest_file = "fu_6.6_res_effect.zip"
    def fu_sync_url_dir_path = "https://download.agora.io/demo/release"
    def fu_sync_url_param = []
    // END github

    syncFaceunityEffectAsset(fu_sync_url_dir_path, fu_sync_dest_file, fu_sync_url_param)
}

gradle.projectsEvaluated {
    tasks.findByName("preBuild").dependsOn syncFaceunityAssets
}
